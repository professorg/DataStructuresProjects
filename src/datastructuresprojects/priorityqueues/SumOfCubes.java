/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datastructuresprojects.priorityqueues;

import edu.princeton.cs.algs4.MinPQ;

/**
 *
 * @author grant
 */
public class SumOfCubes {
    
    public static void main(String[] args) {
        
        long n = 1_000_000;
        
        MinPQ<ThreeTuple> pq = new MinPQ();
        for (int i = 0; i <= n; i++) {
            pq.insert(new ThreeTuple(i, 0));
        }
        
        long last = -1;
        while (!pq.isEmpty()) {
            ThreeTuple t = pq.delMin();
            if (t.sum() == last) {
                System.out.print(", " + t);
            } else {
                System.out.println("");
                System.out.print(t);
            }
            if (t.j < n) {
                pq.insert(new ThreeTuple(t.i, t.j + 1));
            }
            last = t.sum();
        }
        
    }
    
    private static class ThreeTuple implements Comparable<ThreeTuple> {
        
        public long i, j;
        
        public ThreeTuple(long i, long j) {
            this.i = i;
            this.j = j;
        }

        public long sum() {
            return i*i*i + j*j*j;
        }
        
        @Override
        public String toString() {
            return String.format("(%d, %d, %d)", sum(), i, j);
        }

        @Override
        public int compareTo(ThreeTuple t) {
            return Long.compare(sum(), t.sum());
        }
    }
    
    /*
    Multiple tuples per line means same sum
    
    Test:
    (0, 0, 0)
    (1, 1, 0), (1, 0, 1)
    (2, 1, 1)
    (8, 2, 0), (8, 0, 2)
    (9, 1, 2), (9, 2, 1)
    (16, 2, 2)
    (27, 3, 0), (27, 0, 3)
    (28, 1, 3), (28, 3, 1)
    (35, 2, 3), (35, 3, 2)
    (54, 3, 3)
    (64, 4, 0), (64, 0, 4)
    (65, 1, 4), (65, 4, 1)
    (72, 2, 4), (72, 4, 2)
    (91, 3, 4), (91, 4, 3)
    (125, 5, 0), (125, 0, 5)
    (126, 1, 5), (126, 5, 1)
    (128, 4, 4)
    (133, 2, 5), (133, 5, 2)
    (152, 3, 5), (152, 5, 3)
    (189, 4, 5), (189, 5, 4)
    (216, 6, 0), (216, 0, 6)
    (217, 1, 6), (217, 6, 1)
    (224, 2, 6), (224, 6, 2)
    (243, 3, 6), (243, 6, 3)
    (250, 5, 5)
    (280, 4, 6), (280, 6, 4)
    (341, 5, 6), (341, 6, 5)
    (343, 7, 0), (343, 0, 7)
    (344, 1, 7), (344, 7, 1)
    (351, 2, 7), (351, 7, 2)
    (370, 3, 7), (370, 7, 3)
    (407, 4, 7), (407, 7, 4)
    (432, 6, 6)
    (468, 5, 7), (468, 7, 5)
    (512, 8, 0), (512, 0, 8)
    (513, 1, 8), (513, 8, 1)
    (520, 2, 8), (520, 8, 2)
    (539, 3, 8), (539, 8, 3)
    (559, 6, 7), (559, 7, 6)
    (576, 4, 8), (576, 8, 4)
    (637, 5, 8), (637, 8, 5)
    (686, 7, 7)
    (728, 6, 8), (728, 8, 6)
    (729, 9, 0), (729, 0, 9)
    (730, 1, 9), (730, 9, 1)
    (737, 2, 9), (737, 9, 2)
    (756, 3, 9), (756, 9, 3)
    (793, 4, 9), (793, 9, 4)
    (854, 5, 9), (854, 9, 5)
    (855, 7, 8), (855, 8, 7)
    (945, 6, 9), (945, 9, 6)
    (1000, 10, 0), (1000, 0, 10)
    (1001, 1, 10), (1001, 10, 1)
    (1008, 2, 10), (1008, 10, 2)
    (1024, 8, 8)
    (1027, 3, 10), (1027, 10, 3)
    (1064, 4, 10), (1064, 10, 4)
    (1072, 7, 9), (1072, 9, 7)
    (1125, 5, 10), (1125, 10, 5)
    (1216, 6, 10), (1216, 10, 6)
    (1241, 8, 9), (1241, 9, 8)
    (1331, 11, 0), (1331, 0, 11)
    (1332, 1, 11), (1332, 11, 1)
    (1339, 2, 11), (1339, 11, 2)
    (1343, 7, 10), (1343, 10, 7)
    (1358, 3, 11), (1358, 11, 3)
    (1395, 4, 11), (1395, 11, 4)
    (1456, 5, 11), (1456, 11, 5)
    (1458, 9, 9)
    (1512, 8, 10), (1512, 10, 8)
    (1547, 6, 11), (1547, 11, 6)
    (1674, 7, 11), (1674, 11, 7)
    (1728, 12, 0), (1728, 0, 12)
    (1729, 1, 12), (1729, 9, 10), (1729, 10, 9), (1729, 12, 1)
    (1736, 2, 12), (1736, 12, 2)
    (1755, 3, 12), (1755, 12, 3)
    (1792, 4, 12), (1792, 12, 4)
    (1843, 8, 11), (1843, 11, 8)
    (1853, 5, 12), (1853, 12, 5)
    (1944, 6, 12), (1944, 12, 6)
    (2000, 10, 10)
    (2060, 9, 11), (2060, 11, 9)
    (2071, 7, 12), (2071, 12, 7)
    (2197, 13, 0), (2197, 0, 13)
    (2198, 1, 13), (2198, 13, 1)
    (2205, 2, 13), (2205, 13, 2)
    (2224, 3, 13), (2224, 13, 3)
    (2240, 8, 12), (2240, 12, 8)
    (2261, 4, 13), (2261, 13, 4)
    (2322, 5, 13), (2322, 13, 5)
    (2331, 10, 11), (2331, 11, 10)
    (2413, 6, 13), (2413, 13, 6)
    (2457, 9, 12), (2457, 12, 9)
    (2540, 7, 13), (2540, 13, 7)
    (2662, 11, 11)
    ...
    */
    
}
